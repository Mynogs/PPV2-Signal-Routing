-- V1.0a AR
-- 31.12.2016 11:55:40 AR V1.0b
-- 22.06.2017 09:12:25 AR V1.0c
-- 28.04.2018 07:26:56 AR V1.0d Add selection and filled draw
-- 24.07.2018 16:38:52 AR V1.0e Add name

generic = {
  parameter = {
    name = 'A',
    initalValue = 0.0,
  },

  init = function(self)
    block.needPPVersion(2, 0, 'm')
    block.setInputsPinCount(0)
    block.setOutputsPinCount(1)
    block.setOutputPinTypeRestrains(1, 'any')
    block.modifyFlags('BreakAlgebraLoop', true)
    block.modifyFlags('SupressStopFunctionCall', true)
  end,

  open = function(self)
    gui.add('Info', 'Info', 'From', 'Receive signals from the Goto block with the\nspecified name')
    gui.add('Edit', 'Name', 'Name')
    gui.set('Name', 'Text', self.parameter.name)
    gui.add('Edit', 'EditInitalValue', 'Inital value')
    gui.set('EditInitalValue', 'Text', self.parameter.initalValue)
    gui.setSize()
  end,

  apply = function(self)
    self.parameter.name = gui.get('Name', 'Text')
    self.parameter.initalValue = gui.get('EditInitalValue', 'Text')
  end,

  close = function()
  end,

  avatar = function(self)
    return block.getDefaultAvatar{
      Type = 0x5F,
      DrawSymbol = [[
        draw.setColorA(1.0, 1.0, 1.0)
        draw.setColorB(0.8, 0.8, 0.8)
        draw.polygon(
          px(0), py(0), px(75), py(0), px(100), py(50), px(75), py(100), px(0), py(100), px(0), py(0), 3
        )
        draw.setColorA(0.0, 0.0, 0.0)
        draw.line(
          px(0), py(0), px(75), py(0), px(100), py(50), px(75), py(100), px(0), py(100), px(0), py(0)
        )
      ]],
      CenterTextSource = "'" .. self.parameter.name .. "'"
    }
  end,

  generate = function(self)
    local source =
      [==[
        local block = {}

        block.start = function()
          if not routing then
            routing = {}
          end
        end

        block.stepFirst = function()
          if routing['NAME'] then
            return routing['NAME']
          end
          return INITALVALUE
        end

        block.stepLast = function(a)
        end

        return block
      ]==]
    local replaces = {
      ['NAME'] = self.parameter.name,
      ['INITALVALUE'] = self.parameter.initalValue,
    }
    return string.gsub(source, '%a+', replaces)
  end,

}

